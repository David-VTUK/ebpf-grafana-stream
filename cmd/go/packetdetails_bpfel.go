// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadPacketDetails returns the embedded CollectionSpec for packetDetails.
func loadPacketDetails() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_PacketDetailsBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load packetDetails: %w", err)
	}

	return spec, err
}

// loadPacketDetailsObjects loads packetDetails and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*packetDetailsObjects
//	*packetDetailsPrograms
//	*packetDetailsMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadPacketDetailsObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadPacketDetails()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// packetDetailsSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type packetDetailsSpecs struct {
	packetDetailsProgramSpecs
	packetDetailsMapSpecs
}

// packetDetailsSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type packetDetailsProgramSpecs struct {
	PacketDetails *ebpf.ProgramSpec `ebpf:"packet_details"`
}

// packetDetailsMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type packetDetailsMapSpecs struct {
	Rb *ebpf.MapSpec `ebpf:"rb"`
}

// packetDetailsObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadPacketDetailsObjects or ebpf.CollectionSpec.LoadAndAssign.
type packetDetailsObjects struct {
	packetDetailsPrograms
	packetDetailsMaps
}

func (o *packetDetailsObjects) Close() error {
	return _PacketDetailsClose(
		&o.packetDetailsPrograms,
		&o.packetDetailsMaps,
	)
}

// packetDetailsMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadPacketDetailsObjects or ebpf.CollectionSpec.LoadAndAssign.
type packetDetailsMaps struct {
	Rb *ebpf.Map `ebpf:"rb"`
}

func (m *packetDetailsMaps) Close() error {
	return _PacketDetailsClose(
		m.Rb,
	)
}

// packetDetailsPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadPacketDetailsObjects or ebpf.CollectionSpec.LoadAndAssign.
type packetDetailsPrograms struct {
	PacketDetails *ebpf.Program `ebpf:"packet_details"`
}

func (p *packetDetailsPrograms) Close() error {
	return _PacketDetailsClose(
		p.PacketDetails,
	)
}

func _PacketDetailsClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed packetdetails_bpfel.o
var _PacketDetailsBytes []byte
